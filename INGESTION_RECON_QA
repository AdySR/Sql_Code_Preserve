Alter PROC [edw_DR].[CDW_INGESTION_RECON] @targettablename [varchar](200),@keycolumn [varchar](200) AS

--[edw_DR].[CDW_INGESTION_RECON] 'BSID' , 'MANDT, BUKRS, KUNNR, UMSKS, UMSKZ, AUGDT, AUGBL, ZUONR, GJAHR, BELNR, BUZEI'

/*************************************************************************************************************************************************
procedure name                  :     [CDW_INGESTION_RECON]
create date / modify date       :     27 june 2023
author                          :     aditya.r     
description                     :     this procedure is used to perform insert,update and delete operations based on staging table to the actual table
call by                         :     cdc
parameters(s)                   :     @targettablename - insert, update and delete operations will be performed on this table
.........  @keycolumn - this is used in where condition to perform update and delete operations
**************************************************************************************************************************************************/

begin

declare @tabledetails nvarchar(max);
declare @stgtabledetails nvarchar(max);
declare @updatedstring nvarchar(max);
declare @whereconcatstring nvarchar(max);
declare @whereconcatstringupdated nvarchar(max);
declare @executesqlupdate nvarchar(max);
declare @executesqlinsert nvarchar(max);
declare @executesqldelete nvarchar(max);
declare @updatedstringnew nvarchar(max);
declare @updaterecent nvarchar(max);
declare @inserttgtdistinctstring nvarchar(max);
declare @inserttgtdistinctcount int;
declare @total1 int;
declare @i int = 1;
declare @j int = 1;
declare @concat as varchar(max)='';
declare @concatnew as varchar(max)='';
declare @updateconcat as varchar(max)='';
declare @whereconcat as varchar(max)='';
declare @concatremovechar varchar(max);
declare @columnstring varchar(max);
declare @columnstringnew varchar(max);
declare @columnname varchar(max);
declare @total int;
declare @columnname1 varchar(max);
declare @load_date datetime = getdate()
declare @updated_date datetime = @load_date
declare @oncondition nvarchar(max)='';
declare @sourcecolumn nvarchar(max)=''
declare @record_count int ;
declare @sequence_number int = 1 ;
declare @operation_on_data_value int;
declare @insert_loop_string nvarchar(max)='';
declare @delete_loop_string nvarchar(max)='';
declare @ins_del_common_table_string nvarchar(max)='';
declare @inserts_string nvarchar(max)='';
declare @delete_string nvarchar(max)='';
declare @common_delete_ins_count int;
declare @unique_inserts_query nvarchar(max)='';
declare @unique_deletes_query nvarchar(max)='';
declare @unique_updates_query nvarchar(max)='';
declare @unique_inserts_qualified_query nvarchar(max)='';
declare @unique_deletes_qualified_query nvarchar(max)='';
declare @insert_script_query nvarchar(max)='';
declare @delete_script_query nvarchar(max)='';
declare @update_script_string nvarchar(max)='';
declare @total_source_insert_string nvarchar(max)='';
declare @total_source_insert_count int;
declare @total_source_delete_string nvarchar(max)='';
declare @total_source_delete_count int;
declare @total_source_update_string nvarchar(max)='';
declare @total_source_update_count int;
declare @unique_inserts_count_query nvarchar(max)='';
declare @unique_inserts_count nvarchar(max)='';
declare @unique_updates_count_query nvarchar(max)='';
declare @unique_updates_count nvarchar(max)='';
declare @unique_deletes_count_query nvarchar(max)='';
declare @unique_deletes_count nvarchar(max)='';
declare @target_before_load_count_string nvarchar(max)='';
declare @target_before_load_count int;
declare @total_source_count_string nvarchar(max)='';
declare @total_source_count int;
declare @in_tandem_inserts int;
declare @in_tandem_deletes int;
declare @reconaudit char = 'Y';
declare @ins_loop_count_string nvarchar(max)='';
declare @del_loop_count_string nvarchar(max)='';
declare @ins_loop_count int;
declare @del_loop_count int;
declare @inserts_already_existing_string nvarchar(max)='';
declare @inserts_already_existing_count int;
declare @orphan_update_count_string nvarchar(max)='';
declare @orphan_update_count int;
declare @deletes_not_existing_string nvarchar(max)='';
declare @deletes_not_existing_count int;
declare @target_after_load_count_string nvarchar(max)='';
declare @target_after_load_count int;
declare @insert_loop_counter int =0;
declare @delete_loop_counter int =0;
declare @delete_loop_if_exists_query nvarchar(max)='';
declare @insert_loop_if_exists_query nvarchar(max)='';
declare @insert_loop_if_exists_query_count int;
declare @delete_loop_if_exists_query_count int;

set @tabledetails = concat('src_sap_r3.',@targettablename)
set @stgtabledetails = concat('src_sap_r3.','stg_',@targettablename)

begin try


if object_id(N'tempdb..#columnnames',N'U') is not null
drop table #columnnames
if object_id(N'tempdb..#columnnames1',N'U') is not null
drop table #columnnames1


create table #columnnames with(DISTRIBUTION = ROUND_ROBIN, HEAP) as 
select row_number() over (order by column_name) as rownum,column_name
from (select column_name from information_schema.columns where table_schema = 'src_sap_r3' and table_name = @targettablename and column_name not in('load_date'))a
set @total = (select count(*) from #columnnames)
create table #columnnames1 with(DISTRIBUTION = ROUND_ROBIN, HEAP) as 
select row_number() over(order by value) as rownum, value
from (select value from string_split(@keycolumn,','))a
set @total1 = (select count(1) from #columnnames1)


while(@i <= @total)
begin
	set @columnname = (select concat('[',column_name,']') from #columnnames where rownum = @i);
	set @concat += @columnname + ','
	set @concatnew += 's.' + @columnname + ','
	set @updateconcat += 't.' + @columnname + '= s.' + @columnname + ',';
	set @i+=1
end
while(@j <= @total1)
begin
	set @columnname1 = (select value from #columnnames1 where rownum = @j)
	set @whereconcat += ' t.' + @columnname1 +  ' = s.' + @columnname1 + ' and ';
	set @oncondition +=' t.' + @columnname1 + ' is null  and '
	set @j+=1
end
	set @columnstring  = left(@concat, len(@concat)-1);
	set @columnstringnew  = left(@concatnew, len(@concat)-1);
	set @updatedstring = replace(@updateconcat,@targettablename+'.','s');
	set @updatedstringnew = left(@updatedstring, len(@updatedstring)-1);
	set @sourcecolumn = replace(@concat, '[','s.[')

if object_id(N'tempdb..#columnnames1', N'U') is not null
begin
	set @whereconcatstring = replace(@whereconcat,@targettablename+'.', 's');
	set @whereconcatstringupdated = left(@whereconcatstring,len(@whereconcatstring)-3);
	set @oncondition = left(@oncondition,len(@oncondition)-3);
end

set @target_before_load_count_string = N' select @target_before_load_count = count(1) from ' + @tabledetails
exec sp_executesql @target_before_load_count_string, N'@target_before_load_count int output', @target_before_load_count output

set @total_source_count_string = N' select @total_source_count = count(1) from ' + @stgtabledetails
exec sp_executesql @total_source_count_string, N'@total_source_count int output', @total_source_count output

set @total_source_insert_string=N' select @total_source_insert_count = count(1) from  ' + @stgtabledetails+' where operationondata =2'
exec sp_executesql @total_source_insert_string, N'@total_source_insert_count int output', @total_source_insert_count output

set @total_source_delete_string=N' select @total_source_delete_count = count(1) from ' + @stgtabledetails+'  where operationondata =1'
exec sp_executesql @total_source_delete_string, N'@total_source_delete_count int output', @total_source_delete_count output

set @total_source_update_string=N' select @total_source_update_count = count(1) from  ' + @stgtabledetails+'  where operationondata =4'
exec sp_executesql @total_source_update_string, N'@total_source_update_count int output', @total_source_update_count output


set @inserts_string='
CREATE TABLE #src_ins WITH
(
            DISTRIBUTION = ROUND_ROBIN,
            HEAP
) AS
select *  from '+@stgtabledetails+' where  operationondata =2 '

set @delete_string='
CREATE TABLE #src_del WITH
(
            DISTRIBUTION = ROUND_ROBIN,
            HEAP
) AS
select *  from '+@stgtabledetails+' where  operationondata =1 '

set @ins_del_common_table_string='
CREATE TABLE #ins_del_common WITH
(
            DISTRIBUTION = ROUND_ROBIN,
            HEAP
) AS

Select distinct * from (
select t.*  from #src_ins t inner join #src_del s on '+@whereconcatstringupdated+' 
union all
select s.*  from #src_ins t left join #src_del s on '+@whereconcatstringupdated+' 
)T  '



exec sp_executesql @inserts_string
exec sp_executesql @delete_string
exec sp_executesql @ins_del_common_table_string


CREATE TABLE #ins_del_common_loop WITH
(
            DISTRIBUTION = ROUND_ROBIN,
            HEAP
) AS
select row_number() over(order by __$start_lsn ) sequence, * from #ins_del_common where __$start_lsn is not null ;

set @ins_loop_count_string = N' select @ins_loop_count = count(1) from #ins_del_common_loop s left join ' + @tabledetails+' t on  '+@whereconcatstringupdated+'  where  s.operationondata = 2 and '+@oncondition
exec sp_executesql @ins_loop_count_string, N'@ins_loop_count int output', @ins_loop_count output

set @del_loop_count_string = N' select @del_loop_count = count(1) from #ins_del_common_loop s inner join ' + @tabledetails+' t on  '+@whereconcatstringupdated+'  where  s.operationondata = 1 '
exec sp_executesql @del_loop_count_string, N'@del_loop_count int output', @del_loop_count output


set @record_count = ( select count(1) from #ins_del_common_loop )

while (@sequence_number <= @record_count)
begin

set @operation_on_data_value =   ( select operationondata  from #ins_del_common_loop where sequence = @sequence_number )
 
if(@operation_on_data_value =1)
	begin


	set @delete_loop_if_exists_query =N' select @delete_loop_if_exists_query_count = count(1) from #ins_del_common_loop  s inner join '+@tabledetails+'  t on '+@whereconcatstringupdated+' 	where s.sequence = ' + cast(@sequence_number as char)
	print(@delete_loop_if_exists_query)
	execute sp_executesql @delete_loop_if_exists_query, N'@delete_loop_if_exists_query_count int output', @delete_loop_if_exists_query_count output
	if (@delete_loop_if_exists_query_count =1)
	begin
	set @delete_loop_counter = @delete_loop_counter + 1
	end

	set @delete_loop_string=' delete t from '+@tabledetails+' t inner join #ins_del_common_loop s on '+@whereconcatstringupdated+'	where s.sequence = ' + cast(@sequence_number as char)
	exec sp_executesql @delete_loop_string

	end
if(@operation_on_data_value =2)
	begin

	set @insert_loop_if_exists_query =N' select @insert_loop_if_exists_query_count = count(1) from 	#ins_del_common_loop s 	left join  '+@tabledetails+'		 t	on '+@whereconcatstringupdated+' 	where s.sequence = ' + cast(@sequence_number as char)+' AND ( '+@oncondition +' )	'
	print(@insert_loop_if_exists_query)
	execute sp_executesql @insert_loop_if_exists_query, N'@insert_loop_if_exists_query_count int output', @insert_loop_if_exists_query_count output
	if (@insert_loop_if_exists_query_count =1)
	begin
	set @insert_loop_counter = @insert_loop_counter + 1
	end

	set @insert_loop_string = '	insert into '+@tabledetails+'  ('+@columnstring+' , LOAD_DATE)  
	select '+@sourcecolumn+' '''+ convert(varchar, @load_date, 121) +''' from 	#ins_del_common_loop s 	left join  '+@tabledetails+'		 t	on '+@whereconcatstringupdated+' 	where s.sequence = ' + cast(@sequence_number as char)+' AND ( '+@oncondition +' )	'
	exec sp_executesql @insert_loop_string

	end
set @sequence_number = @sequence_number+1

end



set @unique_inserts_query ='	select '+@columnstring+' into #unique_inserts 
from(	select row_number() over(partition by '+@keycolumn+' order by __$start_lsn desc) rn ,* from '+@stgtabledetails+' where operationondata =2	)t	where rn=1 '
exec sp_executesql @unique_inserts_query

set @unique_deletes_query ='	select '+@columnstring+' into #unique_deletes 
from(	select row_number() over(partition by '+@keycolumn+' order by __$start_lsn desc) rn ,* from '+@stgtabledetails+' where operationondata =1	)t	where rn=1 '
exec sp_executesql @unique_deletes_query

set @unique_updates_query='		select '+@columnstring+' into #unique_updates 
from(	select row_number() over (partition by  '+@keycolumn+' order by __$start_lsn desc) rn ,* from '+@stgtabledetails+' where operationondata =4	)t	where rn=1 '
exec sp_executesql @unique_updates_query

set @unique_inserts_qualified_query='	select * into #unique_inserts_qualified from #unique_inserts s		where  not exists( select 1 from #ins_del_common_loop t where 	'+@whereconcatstringupdated+'	)	'
exec sp_executesql @unique_inserts_qualified_query

set @unique_deletes_qualified_query='	select * into #unique_deletes_qualified	from #unique_deletes s		where  not exists( select 1 from #ins_del_common_loop t where 	'+@whereconcatstringupdated+'	)	'
exec sp_executesql @unique_deletes_qualified_query

set @unique_inserts_count_query = N'select @unique_inserts_count =count(1) from #unique_inserts_qualified'
exec sp_executesql @unique_inserts_count_query, N'@unique_inserts_count int output', @unique_inserts_count output

set @unique_deletes_count_query = N'select @unique_deletes_count =count(1) from #unique_deletes_qualified'
exec sp_executesql @unique_deletes_count_query, N'@unique_deletes_count int output', @unique_deletes_count output

set @unique_updates_count_query = N'select @unique_updates_count =count(1) from #unique_updates'
exec sp_executesql @unique_updates_count_query, N'@unique_updates_count int output', @unique_updates_count output

set @inserts_already_existing_string =' select @inserts_already_existing_count = count(1)  
from #unique_inserts_qualified s inner join '+@tabledetails+' t	 on '+@whereconcatstringupdated
exec sp_executesql @inserts_already_existing_string,N'@inserts_already_existing_count int output', @inserts_already_existing_count output

set @insert_script_query = N'insert into '+@tabledetails+'  ('+@columnstring+' , LOAD_DATE)  
select '+@sourcecolumn+' '''+ convert(varchar, @load_date, 121) +''' from 	#unique_inserts_qualified s 	left join  '+@tabledetails+'		 t	on '+@whereconcatstringupdated+' 	where '+@oncondition
exec sp_executesql @insert_script_query

set @orphan_update_count_string =N'
Select @orphan_update_count = count(1) 
from #unique_updates  s left join '+@tabledetails+' t	 on '+@whereconcatstringupdated+'  
where '+@oncondition
exec sp_executesql @orphan_update_count_string,N'@orphan_update_count int output', @orphan_update_count output

set @update_script_string=N'update  t
set  ' + @updatedstringnew + ', LOAD_DATE = '''+  convert(varchar, @load_date, 121) +''' 	
from	'+@tabledetails+' t inner join #unique_updates s on '+@whereconcatstringupdated
exec sp_executesql @update_script_string

set @deletes_not_existing_string ='select @deletes_not_existing_count = count(1)
from #unique_deletes_qualified s left join '+@tabledetails+' t	 on '+@whereconcatstringupdated+'	where '+@oncondition
exec sp_executesql @deletes_not_existing_string,N'@deletes_not_existing_count int output', @deletes_not_existing_count output

set @delete_script_query='delete t from '+@tabledetails+' t inner join #unique_deletes_qualified s on '+@whereconcatstringupdated
exec sp_executesql @delete_script_query

set @target_after_load_count_string = N' select @target_after_load_count = count(1) from ' + @tabledetails
exec sp_executesql @target_after_load_count_string, N'@target_after_load_count int output', @target_after_load_count output

Insert into [edw_CTRL].[CDW_Job_Recon_Details] ( 
 CDCPipelineRunDate
,TableName
,TotalSourceCount
,TotalSourceInsertCount
,TotalSourceUpdateCount
,TotalSourceDeleteCount
,SourceInsertLoopCount
,SourceDeleteLoopCount
,SourceUniqueInsertCount
,SourceUniqueDeleteount
,SourceUniqueUpdateCount
,InsertsAlreadyExisting
,DeletesNotExisting
,TargetBeforeLoadCount
,TargetAfterLoadCount
)

Select
Getdate(),
@tabledetails,
@total_source_count,
@total_source_insert_count,
@total_source_update_count,
@total_source_delete_count,
@insert_loop_counter,
@delete_loop_counter,
@unique_inserts_count,
@unique_deletes_count,
@unique_updates_count,
@inserts_already_existing_count,
@deletes_not_existing_count,
@target_before_load_count,
@target_after_load_count



end try

begin catch
throw
end catch

end

